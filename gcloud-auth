#!/bin/bash

#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([gcloud_key],[k],[Google Cloud key in base64],[])
# ARG_OPTIONAL_SINGLE([gcloud_key_env],[e],[Env name with google cloud key],[GCLOUD_KEY])
# ARG_OPTIONAL_SINGLE([zone],[z],[Google cloud zone],[])
# ARG_OPTIONAL_SINGLE([region],[r],[Google Cloud region],[])
# ARG_OPTIONAL_SINGLE([k8s_cluster],[c],[Kubernets cluster name],[])
# ARG_HELP([Athentication in google cloud service])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='kezrch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_gcloud_key=
_arg_gcloud_key_env="GCLOUD_KEY"
_arg_zone=
_arg_region=
_arg_k8s_cluster=

print_help ()
{
	printf '%s\n' "Athentication in google cloud service"
	printf 'Usage: %s [-k|--gcloud_key <arg>] [-e|--gcloud_key_env <arg>] [-z|--zone <arg>] [-r|--region <arg>] [-c|--k8s_cluster <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-k,--gcloud_key: Google Cloud key in base64 (no default)"
	printf '\t%s\n' "-e,--gcloud_key_env: Env name with google cloud key (default: 'GCLOUD_KEY')"
	printf '\t%s\n' "-z,--zone: Google cloud zone (no default)"
	printf '\t%s\n' "-r,--region: Google Cloud region (no default)"
	printf '\t%s\n' "-c,--k8s_cluster: Kubernets cluster name (no default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-k|--gcloud_key)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_gcloud_key="$2"
				shift
				;;
			--gcloud_key=*)
				_arg_gcloud_key="${_key##--gcloud_key=}"
				;;
			-k*)
				_arg_gcloud_key="${_key##-k}"
				;;
			-e|--gcloud_key_env)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_gcloud_key_env="$2"
				shift
				;;
			--gcloud_key_env=*)
				_arg_gcloud_key_env="${_key##--gcloud_key_env=}"
				;;
			-e*)
				_arg_gcloud_key_env="${_key##-e}"
				;;
			-z|--zone)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zone="$2"
				shift
				;;
			--zone=*)
				_arg_zone="${_key##--zone=}"
				;;
			-z*)
				_arg_zone="${_key##-z}"
				;;
			-r|--region)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_region="$2"
				shift
				;;
			--region=*)
				_arg_region="${_key##--region=}"
				;;
			-r*)
				_arg_region="${_key##-r}"
				;;
			-c|--k8s_cluster)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_k8s_cluster="$2"
				shift
				;;
			--k8s_cluster=*)
				_arg_k8s_cluster="${_key##--k8s_cluster=}"
				;;
			-c*)
				_arg_k8s_cluster="${_key##-c}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Not save history
export HISTIGNORE=' *'

# Default by envs
_default_key=$(printf '%s\n' "${!_arg_gcloud_key_env}")
_arg_gcloud_key=${_arg_gcloud_key:-$_default_key}
_arg_zone=${_arg_zone:-$GCLOUD_ZONE}
_arg_region=${_arg_region:-$GCLOUD_REGION}
_arg_k8s_cluster=${_arg_k8s_cluster:-$GCLOUD_K8S_CLUSTER}

if [ -z $_arg_gcloud_key ]; then
  echo "Require --gcloud_key option or \$GCLOUD_KEY env"
  exit 1
fi

# Connect gcloud
_json_key_file="/tmp/gcloud_key.json"
echo $_arg_gcloud_key | base64 -d > $_json_key_file
gcloud auth activate-service-account --key-file $_json_key_file

gcloud config set project $(cat $_json_key_file | jq ".project_id" -r)

[ -n "$_arg_zone" ] && gcloud config set compute/zone $_arg_zone
[ -n "$_arg_region" ] && gcloud config set compute/region $_arg_region

if [ -n "$_arg_k8s_cluster" ]; then
  gcloud container clusters get-credentials $_arg_k8s_cluster
  kubectl get pods
fi

# ] <-- needed because of Argbash
